// file system
vi file1.txt -> creates a file named file1.txt on first run
press i -> to edit
press esc -> to stop editing
type :wq! and hit enter -> to force exit the file




// git basics
git status -> status of the project
git init -> on any project i need to run this command one time. it will create a .git private folder in project
ls -> list all files
ls -a -> deep list all files
cd .git -> go inside .git folder (one level down)
cd .. -> go to one level up
ls -la -> deep deep list
rm -rf .git -> delete .git folder
git add file1.txt -> untracked to staged state
git status
git rm --cached file1.txt -> staged to untracked
git add . -> shortcut to stage every file available
states: untracked <-> staged -> commited
git default branch name is main/master
git commit -m "This is my first commit" -> this will only commit the staged files. untracked files wont be commited
git log -> to know the version of commit
modified files wont be commited. you need to re-run git add filename and then commit again to commit the modified files
git show commitID -> to know details about a particular commit
git log -n 1 -> will show only the top 1 log
git log --committer="araf-git" -> will show all commits commited by araf-git
Press q to exit the git log view in the terminal.




// branching
x applicaton deployed on production. if i want to change anything, then i have to 
stop applicaton -> make changes -> test -> deploy again
but stopping it will cause errors and the applicaton wont work until deployed again
its not a good idea
make a copy of production applicaton and make changes on that copy independently. after changing, deploy the copy. this strategy is called branching
after branching, merge it on the main/master branch
git branch -> find the current branch
git branch b1 -> create new b1 branch. b1 will have a complete copy of master/main branch files
* master -> means i am using this branch
git branch -d b1 -> delete b1 branch
git checkout b1 -> from main, swith to b1
git checkout master -> from b1, swith to master
shortcut: git checkout -b b2 -> creates b2 branch. after creating it also checkouts b2


// merge conflict
master/main status s1
b1 (main copy) status s2
b2 (main copy) status s3
if i merge b1 on main then main status s2.
now if i want to merge b2 then it will cause merge conflict. cause b2 is based on s1. but current main status after merging b1 is s2.
solution:
1. fix and commit it: ideal solution
run git status. now you know the file that is causing merge conflict. open the file. edit it. run git add (.). then commit. it will solve the problem 
2. abort the merge: not an ideal solution
git merge --abort




// merge
at first go to main/master branch. then merge
git merge b1 -> it will merge b1 to main/master



// remote = github.com
// local = git
// clone github repository in local
git clone https://github.com/araf-git/git-gitHub.git 
if i clone a github repository, then that repository is already git initialized. i dont need to run git init
// run the below commands inside the cloned folder
git branch -> will only show local main/master branch that i cloned
git branch -a -> will also show remote branches
git remote -v -> shows if i am connected to a remote repository

transfer code from local to remote(github.com)
1. first create a repository in github.com
2. connect git and github repository
3. push the code
git remote add origin https://github.com/araf-git/git-github.git
git branch -M main
git push -u origin main


// bring remote changes to local
way 1
1. git fetch origin
2. git rebase origin/main
way 2
git pull -> internally runs git fetch and git merge




// how to update after pushing to github.com
git add .
git commit -m "Update message"
git push



// warning
remote: This repository moved. Please use the new location:    
remote:   https://github.com/araf-git/git-github.git
To https://github.com/araf-git/git-gitHub.git
// solve
Run this to update your remote to the new location:
git remote set-url origin https://github.com/araf-git/git-github.git